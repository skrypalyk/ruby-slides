<section id="method_stubs" class="slide">
  <h2>Method stubs</h2>

  <p>A <strong>method stub</strong> is a method that we can program to return predefined responses during the execution of a code example.</p>

  <script type="syntaxhighlighter" class="brush: ruby">
    describe Customer do
      it "uses the customer's name in the header" do
        customer = double('customer')
        expect(customer).to receive(:name).and_return('Aslak')
        expect(customer.name).to eq 'Aslak'
      end
    end
  </script>

  <p>Method stubs can return different values on different calls: this will return 5.5% when a message for interest_rate is received <strong>for the first time</strong>, but will return 3% for subsequent calls/messages.</p>

  <script type="syntaxhighlighter" class="brush: ruby">
    expect(HomeLoan).to receive(:rate).and_return('5.5%', '3%')
  </script>

  <p>The mock object can be created with stubbed methods at once.</p>
  <script type="syntaxhighlighter" class="brush: ruby">
    customer = double('customer', name: 'Aslak')
    obj = double('object', created_at: -> { Time.now })
  </script>

  <p>Stub methods can return values depending on the arguments.</p>
  <script type="syntaxhighlighter" class="brush: ruby">
    ages = double('ages')
    allow(ages).to receive(:age_for) do |what|
      if what == 'drinking'
        21
      elsif what == 'voting'
        18
      end
    end

    expect(ages.age_for('drinking')).to eq 21
    expect(ages.age_for('voting')).to eq 18
  </script>
</section>

<section id="stub-returns" class="slide">
  <h2>Method stubs</h2>

  <p>Besides returning a value, method stub can yield a block, raise an exception, or throw the message.</p>

  <script type="syntaxhighlighter" class="brush: ruby">
    class Triviality
      def one_two_three
        yield self
      end
    end

    expect(triviality).to receieve(:one_two_three).and_yield(1)
  </script>

  <script type="syntaxhighlighter" class="brush: ruby">
    double = double('new-double')
    expect(double).to receive(:msg).and_raise(NameError)
    expect(double).to receive(:msg).and_throw(NameError)
  </script>
</section>
