<section id="shared-context" class="slide">
  <h2>Shared context</h2>
  <p>
    Use shared_context to define a block that will be evaluated in the context of example groups either explicitly, using include_context, or implicitly by matching metadata.
  </p>
  <script type="syntaxhighlighter" class="brush: ruby">
    # shared context
    RSpec.configure do |rspec|
      rspec.shared_context_metadata_behavior = :apply_to_host_groups
    end

    RSpec.shared_context "shared stuff", :shared_context => :metadata do
      before { @some_var = :some_value }
      def shared_method
        "it works"
      end
      let(:shared_let) { {'arbitrary' => 'object'} }
      subject do
        'this is the subject'
      end
    end

    RSpec.configure do |rspec|
      rspec.include_context "shared stuff", :include_shared => true
    end

    # example where we use shared context

    RSpec.describe "group that includes a shared context using 'include_context'" do
      include_context "shared stuff"

      it "has access to methods defined in shared context" do
        expect(shared_method).to eq("it works")
      end

      it "has access to methods defined with let in shared context" do
        expect(shared_let['arbitrary']).to eq('object')
      end

      it "runs the before hooks defined in the shared context" do
        expect(@some_var).to be(:some_value)
      end

      it "accesses the subject defined in the shared context" do
        expect(subject).to eq('this is the subject')
      end

      group = self

      it "inherits metadata from the included context" do |ex|
        expect(group.metadata).to include(:shared_context => :metadata)
        expect(ex.metadata).to include(:shared_context => :metadata)
      end
    end

  </script>
  <script type="syntaxhighlighter" class="brush: bash">
  rspec spec/shared_stuff_spec.rb
  ........

  Finished in 0.00758 seconds
  5 examples, 0 failures
  </script>
</section>
